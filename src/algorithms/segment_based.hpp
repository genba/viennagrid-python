#ifndef ALGORITHMS_SEGMENT_BASED_HPP
#define ALGORITHMS_SEGMENT_BASED_HPP

#include "../segments/linear.hpp"
#include "../segments/triangular.hpp"
#include "../segments/quadrilateral.hpp"
#include "../segments/tetrahedral.hpp"

/****************
 * IS_INTERFACE *
 ****************/

bool LinearCartesian1D_Segment_is_interface(LinearCartesian1D_Segment seg0, LinearCartesian1D_Segment seg1, LinearCartesian1D_Cell cell);
bool LinearCartesian2D_Segment_is_interface(LinearCartesian2D_Segment seg0, LinearCartesian2D_Segment seg1, LinearCartesian2D_Cell cell);
bool LinearCartesian3D_Segment_is_interface(LinearCartesian3D_Segment seg0, LinearCartesian3D_Segment seg1, LinearCartesian3D_Cell cell);
bool LinearCylindrical3D_Segment_is_interface(LinearCylindrical3D_Segment seg0, LinearCylindrical3D_Segment seg1, LinearCylindrical3D_Cell cell);
bool LinearPolar2D_Segment_is_interface(LinearPolar2D_Segment seg0, LinearPolar2D_Segment seg1, LinearPolar2D_Cell cell);
bool LinearSpherical3D_Segment_is_interface(LinearSpherical3D_Segment seg0, LinearSpherical3D_Segment seg1, LinearSpherical3D_Cell cell);

bool TriangularCartesian2D_Segment_is_interface(TriangularCartesian2D_Segment seg0, TriangularCartesian2D_Segment seg1, TriangularCartesian2D_Cell cell);
bool TriangularCartesian3D_Segment_is_interface(TriangularCartesian3D_Segment seg0, TriangularCartesian3D_Segment seg1, TriangularCartesian3D_Cell cell);
bool TriangularCylindrical3D_Segment_is_interface(TriangularCylindrical3D_Segment seg0, TriangularCylindrical3D_Segment seg1, TriangularCylindrical3D_Cell cell);
bool TriangularPolar2D_Segment_is_interface(TriangularPolar2D_Segment seg0, TriangularPolar2D_Segment seg1, TriangularPolar2D_Cell cell);
bool TriangularSpherical3D_Segment_is_interface(TriangularSpherical3D_Segment seg0, TriangularSpherical3D_Segment seg1, TriangularSpherical3D_Cell cell);

bool QuadrilateralCartesian2D_Segment_is_interface(QuadrilateralCartesian2D_Segment seg0, QuadrilateralCartesian2D_Segment seg1, QuadrilateralCartesian2D_Cell cell);
bool QuadrilateralCartesian3D_Segment_is_interface(QuadrilateralCartesian3D_Segment seg0, QuadrilateralCartesian3D_Segment seg1, QuadrilateralCartesian3D_Cell cell);
bool QuadrilateralCylindrical3D_Segment_is_interface(QuadrilateralCylindrical3D_Segment seg0, QuadrilateralCylindrical3D_Segment seg1, QuadrilateralCylindrical3D_Cell cell);
bool QuadrilateralPolar2D_Segment_is_interface(QuadrilateralPolar2D_Segment seg0, QuadrilateralPolar2D_Segment seg1, QuadrilateralPolar2D_Cell cell);
bool QuadrilateralSpherical3D_Segment_is_interface(QuadrilateralSpherical3D_Segment seg0, QuadrilateralSpherical3D_Segment seg1, QuadrilateralSpherical3D_Cell cell);

bool TetrahedralCartesian3D_Segment_is_interface(TetrahedralCartesian3D_Segment seg0, TetrahedralCartesian3D_Segment seg1, TetrahedralCartesian3D_Cell cell);
bool TetrahedralCylindrical3D_Segment_is_interface(TetrahedralCylindrical3D_Segment seg0, TetrahedralCylindrical3D_Segment seg1, TetrahedralCylindrical3D_Cell cell);
bool TetrahedralSpherical3D_Segment_is_interface(TetrahedralSpherical3D_Segment seg0, TetrahedralSpherical3D_Segment seg1, TetrahedralSpherical3D_Cell cell);

/***********
 * SURFACE *
 ***********/

double LinearCartesian1D_Segment_surface(LinearCartesian1D_Segment segment);
double LinearCartesian2D_Segment_surface(LinearCartesian2D_Segment segment);
double LinearCartesian3D_Segment_surface(LinearCartesian3D_Segment segment);
double LinearCylindrical3D_Segment_surface(LinearCylindrical3D_Segment segment);
double LinearPolar2D_Segment_surface(LinearPolar2D_Segment segment);
double LinearSpherical3D_Segment_surface(LinearSpherical3D_Segment segment);

double TriangularCartesian2D_Segment_surface(TriangularCartesian2D_Segment segment);
double TriangularCartesian3D_Segment_surface(TriangularCartesian3D_Segment segment);
double TriangularCylindrical3D_Segment_surface(TriangularCylindrical3D_Segment segment);
double TriangularPolar2D_Segment_surface(TriangularPolar2D_Segment segment);
double TriangularSpherical3D_Segment_surface(TriangularSpherical3D_Segment segment);

double QuadrilateralCartesian2D_Segment_surface(QuadrilateralCartesian2D_Segment segment);
double QuadrilateralCartesian3D_Segment_surface(QuadrilateralCartesian3D_Segment segment);
double QuadrilateralCylindrical3D_Segment_surface(QuadrilateralCylindrical3D_Segment segment);
double QuadrilateralPolar2D_Segment_surface(QuadrilateralPolar2D_Segment segment);
double QuadrilateralSpherical3D_Segment_surface(QuadrilateralSpherical3D_Segment segment);

double TetrahedralCartesian3D_Segment_surface(TetrahedralCartesian3D_Segment segment);
double TetrahedralCylindrical3D_Segment_surface(TetrahedralCylindrical3D_Segment segment);
double TetrahedralSpherical3D_Segment_surface(TetrahedralSpherical3D_Segment segment);

/**********
 * VOLUME *
 **********/

double LinearCartesian1D_Segment_volume(LinearCartesian1D_Segment segment);
double LinearCartesian2D_Segment_volume(LinearCartesian2D_Segment segment);
double LinearCartesian3D_Segment_volume(LinearCartesian3D_Segment segment);
double LinearCylindrical3D_Segment_volume(LinearCylindrical3D_Segment segment);
double LinearPolar2D_Segment_volume(LinearPolar2D_Segment segment);
double LinearSpherical3D_Segment_volume(LinearSpherical3D_Segment segment);

double TriangularCartesian2D_Segment_volume(TriangularCartesian2D_Segment segment);
double TriangularCartesian3D_Segment_volume(TriangularCartesian3D_Segment segment);
double TriangularCylindrical3D_Segment_volume(TriangularCylindrical3D_Segment segment);
double TriangularPolar2D_Segment_volume(TriangularPolar2D_Segment segment);
double TriangularSpherical3D_Segment_volume(TriangularSpherical3D_Segment segment);

double QuadrilateralCartesian2D_Segment_volume(QuadrilateralCartesian2D_Segment segment);
double QuadrilateralCartesian3D_Segment_volume(QuadrilateralCartesian3D_Segment segment);
double QuadrilateralCylindrical3D_Segment_volume(QuadrilateralCylindrical3D_Segment segment);
double QuadrilateralPolar2D_Segment_volume(QuadrilateralPolar2D_Segment segment);
double QuadrilateralSpherical3D_Segment_volume(QuadrilateralSpherical3D_Segment segment);

double TetrahedralCartesian3D_Segment_volume(TetrahedralCartesian3D_Segment segment);
double TetrahedralCylindrical3D_Segment_volume(TetrahedralCylindrical3D_Segment segment);
double TetrahedralSpherical3D_Segment_volume(TetrahedralSpherical3D_Segment segment);

#endif
